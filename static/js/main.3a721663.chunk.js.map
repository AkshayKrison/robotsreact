{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","spec","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GACvB,OACJ,yBAAKC,UAAU,uDACP,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,0BACrB,6BACI,4BAAMF,GACN,2BAAKC,MCOFK,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEbC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAOC,KAAMM,EAAOI,GAAGV,UAE7E,OACG,6BACMO,ICIEK,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OAEX,2BAAOA,UAAU,mCACjBY,KAAK,QAAQC,YAAY,iBAAiBC,SAAUH,MCE9CI,EAPH,SAACC,GACb,OACE,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCkBAC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CAAEC,UAAU,GAHV,E,8DAKLC,EAAOC,GACzBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIpB,OAAIG,KAAKJ,MAAMC,SACJ,6FAIDG,KAAKX,MAAMK,a,GAhBEQ,aCyCbC,E,kDAnCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IAJP,E,gEAYO,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAIrH,IAAD,OACOC,EAAed,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAC,GAC/C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OACI,yBAAK5C,UAAU,MACX,+CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,W,GA5BxBZ,a,MCAlBiB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SP4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.3a721663.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({name, spec, id}) => {\r\n    return(\r\n<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='akshay' src={`https://robohash.org/${ id }AkshayKrison?200x200` } />\r\n        <div>\r\n            <h2>{ name }</h2>\r\n            <p>{ spec }</p>\r\n        </div>\r\n\r\n</div>\r\n    \r\n    )} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\nconst cardComponent = robots.map((user, i) => {\r\n   return <Card key={i} id={robots[i].id} name={robots[i].name}  spec={robots[i].spec}/>\r\n})\r\n    return(\r\n       <div>\r\n            {cardComponent}\r\n       </div> \r\n       \r\n\r\n)}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            \r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"serch\" placeholder=\"Search here...\" onChange={searchChange} />\r\n            \r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return(\r\n     <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n        {props.children}\r\n    </div>\r\n   );\r\n};\r\n   export default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { hasError: false}\r\n    }\r\ncomponentDidCatch(error, info) {\r\nthis.setState({hasError: true})\r\n}\r\n     \r\n    render() {\r\n     if (this.state.hasError) {\r\n         return <h1>There might be an issues Please comeback after some time!!!!!</h1>\r\n     } \r\n     \r\n     else {\r\n        return this.props.children\r\n    }       \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() { \r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json()).then(users => this.setState({robots: users}));\r\n        \r\n    }\r\n\r\n    render(){\r\n             const filterRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>Optimist Robots</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filterRobots} />  \r\n                    </ErrorBoundary>\r\n                   \r\n                </Scroll>\r\n                \r\n            </div>\r\n        )}\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}